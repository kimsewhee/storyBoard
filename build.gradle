plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'org.iclass'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

print(dependencyManagement)

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    //runtimeOnly("com.oracle.database.jdbc:ojdbc11-production:21.5.0")
    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11
    implementation 'com.oracle.database.jdbc:ojdbc11:21.5.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //queryDSL 설정. : 뒤에 버전 표시 안하면 최신버전
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-collections'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties["querydsl.version"]}:jpa"       //querydsl JPAAnnotationProcessor 설정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"         //java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"        //java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드

    //사용자 정의 application property (thymeleaf3) 를 좀 더 IDE에서 편리하게 연동하여 사용하기 위해
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

tasks.named('test') {
    useJUnitPlatform()
}

//  querydsl 설정은 maven 은 레퍼런스가 있으나 gradle은 spring, mvnrepository 모두 없음. 코딩시점 버전 5.0
//  querydsl 에서 제공하는 모든 의존성 추가. 설정 후 gradle의 build 실행하면 QClass 생김
//  querydsl 설정. generated는 문자열 변수. QClass 가 build 디렉토리에서 생기는 것은 별도로 빼내기 위함(gradle , IDE 접근하는 경로가 다른 것으로 생기는 문제 해결방법)
def generated = 'src/main/generated'

//  querydsl QClass 파일 생성 OutputDirectory 위치 변경
tasks.withType(JavaCompile)  {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}
//  java source set(디렉토리) 에 querydsl QClass 디렉토리 추가
sourceSets{
    main.java.srcDirs += [generated]
}
//  gradle clean 할 때 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

